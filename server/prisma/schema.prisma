datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" 
}

generator client {
  provider = "prisma-client-js"
}

// User model
// This model represents the users of the application, including customers and admins.
// It contains fields for user information, such as name, email, password, and role.

model User {
  id          Int      @id @default(autoincrement())
  firstName   String
  lastName    String
  fullName    String
  email       String   @unique
  username    String?  @unique
  password    String
  phone       String?
  profilePic  String?
  status      String   @default("active") // active, inactive, suspended
  role        Int      // Foreign key to Role
  roleRelation Role    @relation(fields: [role], references: [id])
  address     Address[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Order Order[]

  Cart Cart[]

  Reviews Reviews[]
}

// Role model
model Role {
  id      Int     @id @default(autoincrement())
  role    String  @unique // admin, customer, etc.
  users   User[]
}

// Address model
model Address {
  id            Int     @id @default(autoincrement())
  userId        Int
  user          User    @relation(fields: [userId], references: [id])
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  postalCode    String
  country       String
  isDefault     Boolean @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Order model
// This model represents the orders placed by users.
// It contains fields for order information, such as user ID, order date, total amount, and status.
// It also establishes a relationship with the User model and contains an array of OrderItem models.
// The OrderItem model represents the individual items within an order, including product ID, quantity, and price.

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  orderDate   DateTime    @default(now())
  totalAmount Float
  status      String      @default("pending")
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
}

// OrderItem model
model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

// Cart model
model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id])
  cartItems CartItem[]
}

// CartItem model
model CartItem {
  id        Int     @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

// Category model
// This model represents the categories of products.
// It contains fields for category information, such as name, description, and image.
// It also establishes a one-to-many relationship with the Product model, allowing each category to have multiple products.

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  products    Product[]
}

// Product
model Product {
  id            Int            @id @default(autoincrement())
  name          String
  description   String
  price         Float
  stockCount    Int
  sku           String?
  categoryId    Int
  brand         String?
  videoUrl      String?
  weight        Float?
  discount      Float?
  salePrice     Float?
  createdAt     DateTime       @default(now())
  productImages ProductImage[]
  reviews       Reviews[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  ProductTags   ProductTags[]
  category      Category       @relation(fields: [categoryId], references: [id])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  imageUrl  String
  product   Product @relation(fields: [productId], references: [id])
}

model ProductTags{
  id        Int     @id @default(autoincrement())
  productId Int
  tag       String
  product   Product @relation(fields: [productId], references: [id])
}

// Review model
model Reviews {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

// Contact model
model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  phone     String
  createdAt DateTime @default(now())
}

model newsLetter {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}
